import { wrapItem, blockTypeItem, Dropdown, undoItem, redoItem, icons, MenuItem, MenuItemSpec, DropdownSubmenu } from "prosemirror-menu"
import { EditorState, Command } from "prosemirror-state"
import { Schema, MarkType, Attrs } from "prosemirror-model"
import { toggleMark } from "prosemirror-commands"
import { addInlineImage, addNodeAfterSelection, addTextautor, addTitle, changeToSection, wrapPoem } from "./commands"
import { addColumnAfter, addColumnBefore, addRowAfter, addRowBefore, deleteColumn, deleteRow, deleteTable, mergeCells, setCellAttr, splitCell, toggleHeaderCell, toggleHeaderColumn, toggleHeaderRow } from "prosemirror-tables"
import { openImageDialog } from "./fileAccess"
import editorState from "./editorState"
import { openFileError } from "./notification"

function cmdItem(cmd: Command, options: Partial<MenuItemSpec>) {
    let passedOptions: MenuItemSpec = {
        label: options.title as string | undefined,
        run: cmd
    }
    for (let prop in options) (passedOptions as any)[prop] = (options as any)[prop]
    if (!options.enable && !options.select)
        passedOptions[options.enable ? "enable" : "select"] = state => cmd(state)

    return new MenuItem(passedOptions)
}

function markActive(state: EditorState, type: MarkType) {
    let { from, $from, to, empty } = state.selection
    if (empty) return !!type.isInSet(state.storedMarks || $from.marks())
    else return state.doc.rangeHasMark(from, to, type)
}

function markItem(markType: MarkType, options: Partial<MenuItemSpec>) {
    let passedOptions: Partial<MenuItemSpec> = {
        active(state) { return markActive(state, markType) }
    }
    for (let prop in options) (passedOptions as any)[prop] = (options as any)[prop]
    return cmdItem(toggleMark(markType), passedOptions)
}

function linkItem(markType: MarkType, editLink: any) {
    return new MenuItem({
        title: "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É",
        icon: icons.link,
        active(state) { return markActive(state, markType) },
        enable(state) { return !state.selection.empty },
        run(state, dispatch, view) {
            let callback = function (attrs: Attrs) {
                // –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è 2 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –Ω–∞–¥–æ –±—É–¥–µ—Ç –∏—Ö –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å
                if (markActive(state, markType)) {
                    toggleMark(markType)(state, dispatch);
                };
                if (attrs.href) {
                    toggleMark(markType, attrs)(view.state, view.dispatch)
                }
                view.focus();
            };

            // –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏, –µ—Å–ª–∏ –≤—ã–±—Ä–∞—Ç—å —á–∞—Å—Ç—å —Å—Å—ã–ª–∫–∏, —Ç–æ–ª—å–∫–æ –æ–Ω–∞ –∏ –æ–±–Ω–æ–≤–∏—Ç—Å—è, –Ω–∞–¥–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –≤—Å—é —Å—Å—ã–ª–∫—É
            let markAttrs: Attrs = {};
            for (const mark of state.selection.$to.marks()) {
                if (mark.type === markType) {
                    markAttrs = mark.attrs;
                    break;
                };
            };

            editLink(markAttrs, callback);
        }
    })
}

function item(label: string, cmd: (state: EditorState) => boolean) {
    return new MenuItem({ label, select: cmd, run: cmd });
};

function deleteTableSafety(): Command {
    return (state, dispatch) => {
        const $pos = state.selection.$anchor;
        if ($pos.depth > 3 && $pos.node($pos.depth - 3).childCount > 1) {
            return deleteTable(state, dispatch);
        }
        return false;
    };
};

export function buildMenuItems(schema: Schema, dial: any) {

    const toggleStrong = markItem(schema.marks.strong, { title: "–í–∫–ª—é—á–∏—Ç—å –ø–æ–ª—É–∂–∏—Ä–Ω—ã–π", icon: { text: "–ñ", css: "font-weight: bold;" } });
    const toggleEmphasis = markItem(schema.marks.emphasis, { title: "–í–∫–ª—é—á–∏—Ç—å –∫—É—Ä—Å–∏–≤", icon: { text: "–ö", css: "font-style: italic;" } });
    const toggleStrike = markItem(schema.marks.strikethrough, { title: "–í–∫–ª—é—á–∏—Ç—å –∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π", icon: { text: "–ó", css: "text-decoration: line-through;" } });
    const toggleSup = markItem(schema.marks.sup, { title: "–í–∫–ª—é—á–∏—Ç—å –Ω–∞–¥—Å—Ç—Ä–æ—á–Ω—ã–π", icon: { text: "–ù‚Å±" } });
    const toggleSub = markItem(schema.marks.sub, { title: "–í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Å—Ç—Ä–æ—á–Ω—ã–π", icon: { text: "–ü·µ¢" } });
    const toggleCode = markItem(schema.marks.code, { title: "–í–∫–ª—é—á–∏—Ç—å –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π", icon: { text: "–ú", css: "font-family: monospace;" } });
    const toggleLink = linkItem(schema.marks.a, dial);
    const makeInlineImage = new MenuItem({
        title: "–í—Å—Ç–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç",
        icon: { text: "üñº" },
        enable(state) { return addInlineImage()(state) },
        run(state, dispatch) {
            openImageDialog().then(file => {
                const id = editorState.images.value.addAsDataURL(file.name, file.content);
                if (id) {
                    const image = schema.nodes.inlineimage.create({ href: "#" + id });
                    addInlineImage(image)(state, dispatch);
                };
            }).catch((error) => openFileError(error));
        }
    });

    const insertTitle = new MenuItem({
        title: "–í—Å—Ç–∞–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫",
        label: "–ó–∞–≥–æ–ª–æ–≤–æ–∫",
        enable(state) { return addTitle()(state) },
        run(state, dispatch) { addTitle()(state, dispatch) }
    });
    const makeTextauthor = new MenuItem({
        title: "–í—Å—Ç–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Ä–∞",
        label: "–ê–≤—Ç–æ—Ä",
        enable(state) { return addTextautor()(state) },
        run(state, dispatch) { addTextautor()(state, dispatch) }
    });
    const makeParagraph = new MenuItem({
        title: "–í—Å—Ç–∞–≤–∏—Ç—å –∞–±–∑–∞—Ü",
        label: "–ê–±–∑–∞—Ü",
        enable(state) { return addNodeAfterSelection(schema.nodes.p)(state) },
        run(state, dispatch) { addNodeAfterSelection(schema.nodes.p)(state, dispatch) }
    });
    const makeImage = new MenuItem({
        title: "–í—Å—Ç–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        label: "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        enable(state) { return addNodeAfterSelection(schema.nodes.image)(state) },
        run(state, dispatch) {
            openImageDialog().then(file => {
                const id = editorState.images.value.addAsDataURL(file.name, file.content);
                if (id) {
                    const image = schema.nodes.image.create({ href: "#" + id });
                    addNodeAfterSelection(schema.nodes.image, image)(state, dispatch);
                };
            }).catch((error) => openFileError(error));
        }
    });
    const tableTemplate = schema.nodes.table.create(null,
        [schema.nodes.tr.create(null, [schema.nodes.td.create(), schema.nodes.td.create()]),
        schema.nodes.tr.create(null, [schema.nodes.td.create(), schema.nodes.td.create()])])
    const makeTable = new MenuItem({
        title: "–í—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É",
        label: "–¢–∞–±–ª–∏—Ü–∞",
        enable(state) { return addNodeAfterSelection(schema.nodes.table)(state) },
        run(state, dispatch) { addNodeAfterSelection(schema.nodes.table, tableTemplate)(state, dispatch) }
    });

    const toSubtitle = blockTypeItem(schema.nodes.subtitle, {
        title: "–û–±–µ—Ä–Ω—É—Ç—å –≤ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫",
        label: "–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫",
    });
    const toCite = wrapItem(schema.nodes.cite, {
        title: "–û–±–µ—Ä–Ω—É—Ç—å –≤ —Ü–∏—Ç–∞—Ç—É",
        label: "–¶–∏—Ç–∞—Ç–∞",
    });
    const toStanza = wrapItem(schema.nodes.stanza, {
        title: "–û–±–µ—Ä–Ω—É—Ç—å –≤ —Å—Ç–∏—Ö",
        label: "–°—Ç–∏—Ö",
        enable(state) { return wrapPoem()(state) },
        run(state, dispatch) { wrapPoem()(state, dispatch) }
    });
    const toParagraph = blockTypeItem(schema.nodes.p, {
        title: "–ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∞–±–∑–∞—Ü",
        label: "–ê–±–∑–∞—Ü",
    });
    const toSection = blockTypeItem(schema.nodes.section, {
        title: "–ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–µ–∫—Ü–∏—é",
        label: "–°–µ–∫—Ü–∏—è",
        enable(state) { return changeToSection()(state) },
        run(state, dispatch) { changeToSection()(state, dispatch) }
    });

    const insertMenu = new Dropdown([insertTitle, makeTextauthor, makeParagraph, makeImage, makeTable], { label: "–í—Å—Ç–∞–≤–∏—Ç—å" });
    const typeMenu = new Dropdown([toSubtitle, toCite, toStanza, toParagraph, toSection], { label: "–ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å" });
    const tableMenu = new Dropdown([
        item('–í—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü —Å–ª–µ–≤–∞', addColumnBefore),
        item('–í—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü —Å–ø—Ä–∞–≤–∞', addColumnAfter),
        item('–£–¥–∞–ª–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü', deleteColumn),
        item('–í—Å—Ç–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É —Å–≤–µ—Ä—Ö—É', addRowBefore),
        item('–í—Å—Ç–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É —Å–Ω–∏–∑—É', addRowAfter),
        item('–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É', deleteRow),
        item('–û–±—ä–µ–¥–∏–Ω–∏—Ç—å —è—á–µ–π–∫–∏', mergeCells),
        item('–†–∞–∑–¥–µ–ª–∏—Ç—å —è—á–µ–π–∫–∏', splitCell),
        item('–í–∫–ª—é—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü', toggleHeaderColumn),
        item('–í–∫–ª—é—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—É—é —Å—Ç—Ä–æ–∫—É', toggleHeaderRow),
        item('–í–∫–ª—é—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—É—é —è—á–µ–π–∫—É', toggleHeaderCell),
        new DropdownSubmenu([
            item('–í—ã—Ä–æ–≤–Ω—è—Ç—å –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é', setCellAttr('align', 'left')),
            item('–í—ã—Ä–æ–≤–Ω—è—Ç—å –ø–æ —Ü–µ–Ω—Ç—Ä—É', setCellAttr('align', 'center')),
            item('–í—ã—Ä–æ–≤–Ω—è—Ç—å –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é', setCellAttr('align', 'right')),
            item('–í—ã—Ä–æ–≤–Ω—è—Ç—å –ø–æ –≤–µ—Ä—Ö–Ω–µ–º—É –∫—Ä–∞—é', setCellAttr('valign', 'top')),
            item('–í—ã—Ä–æ–≤–Ω—è—Ç—å –ø–æ —Å–µ—Ä–µ–¥–∏–Ω–µ', setCellAttr('valign', 'middle')),
            item('–í—ã—Ä–æ–≤–Ω—è—Ç—å –ø–æ –Ω–∏–∂–Ω–µ–º—É –∫—Ä–∞—é', setCellAttr('valign', 'bottom'))
        ], { label: "–í—ã—Ä–æ–≤–Ω—è—Ç—å" }),
        item('–£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É', deleteTableSafety()),
    ], { label: '–¢–∞–±–ª–∏—Ü–∞' });
    const inlineMenu = [toggleStrong, toggleEmphasis, toggleStrike, toggleSup, toggleSub, toggleCode, makeInlineImage, toggleLink];

    return [inlineMenu, [insertMenu, typeMenu, tableMenu], [undoItem, redoItem]]
}
